
#
# ConfigMaps are good but they store value in plain text. So we do need secrets.
# 
# REMEMBER THAT SECRETS ENCODE DATA IN BASE64 FORMAT. 
# ANYONE WITH THE BASE64 ENCODED SECRET CAN EASILY DECODE IT. 
# AS SUCH THE SECRETS CAN BE CONSIDERED AS NOT VERY SAFE.
#
# The right thing would be to use a template yml file that has PLACEHOLDERS for secrets
# and pre-process the file in build/deploy step before creating the k8s secret object.
#
# Two phases:
# 1. Creating the secret
# 2. Injecting that into the pod
#
# Creation (3 ways):
#
# 1. Imperative way (directly on cmd line)
# kubectl create secret generic mysql-secret --from-literal=MYSQL_USER=supersecret --from-literal=MYSQL_PASSWORD=ultrasecret
#     secret/mysql-secret created
#
# kubectl get secret mysql-secret
#     NAME           TYPE     DATA   AGE
#     mysql-secret   Opaque   2      12s
#
# kubectl describe secret mysql-secret
#     Name:         mysql-secret
#     Namespace:    default
#     Labels:       <none>
#     Annotations:  <none>
#     Type:  Opaque
#     
#     Data
#     ====
#     MYSQL_PASSWORD:  11 bytes
#     MYSQL_USER:      11 bytes
#
# 2. Imperative way (but using a config file)
# cat ./mysql.properties
#     MYSQL_USER: supersecret
#     MYSQL_PASSWORD: ultrasecret
# kubectl create secret generic mysql-secret --from-file=./mysql.properties
#
# 3. Declarative way using the definition file as below
# With a definition file, we don't want to CHECKIN our secret values in pain text.
# So use a base64 value instead (base64 is bidirectional) so this ain't good either.
# But k8s needs it to be base64 so whatever.
#
# echo -n 'supersecret' | base64
#     c3VwZXJzZWNyZXQ=
# echo -n 'ultrasecret' | base64
#     dWx0cmFzZWNyZXQ=
#

apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
data:
  MYSQL_USER: c3VwZXJzZWNyZXQ=
  MYSQL_PASSWORD: dWx0cmFzZWNyZXQ=

#
# No matter how the secrets are created, the following is how they are injected in pods:
#
# 1. All the keys in the "mysql-secret" will be passed to the pod and then to the container
#
#   ...
#   ...
#   spec:
#     containers:
#       - name: mysql-container
#         image: mysql
#         envFrom:
#           - secretRef:
#             name: mysql-secret
#   ...
#   ...
#
# 2. Individually select the keys from secrets
#
#   ...
#   ...
#   spec:
#     containers:
#       - name: mysql-container
#         image: mysql
#         env:
#           - name: MYSQL_USER
#             valueFrom: 
#               secretKeyRef:
#                 name: mysql-secret
#                 key: MYSQL_USER
#           - name: MYSQL_PASSWORD
#             valueFrom: 
#               secretKeyRef:
#                 name: mysql-secret
#                 key: MYSQL_PASSWORD
#   ...
#   ...
#
# 3. Use volumes 
#