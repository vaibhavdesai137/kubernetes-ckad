
#
# ------------------------------
# Create pods without yml files
# ------------------------------
#
# $ kubectl run --generator=run-pod/v1 nginx --image nginx
#       pod/nginx created
# 
# $ kubectl run --generator=run-pod/v1 redis --image redis:foo
#       pod/redis created
# 
# $ kubectl get pods
#       NAME    READY   STATUS         RESTARTS   AGE
#       nginx   1/1     Running        0          8s
#       redis   0/1     ErrImagePull   0          4s
# 

#
# ---------------------------------------
# Create pod yml files from running pods
# ---------------------------------------
#
# $ kubectl get pod nginx -o yaml > nginx-pod-definition.yaml
#
# $ cat nginx-pod-definition.yaml
#       apiVersion: v1
#       kind: Pod
#       metadata:
#           labels:
#               run: nginx
#           ...
#           ...
#       spec:
#           containers:
#               - image: nginx
#                 imagePullPolicy: Always
#                 name: nginx
#                 ...
#                 ...
#       status:
#           ...
#           ...
#

#
# ---------------------------------------
# Create pod yml files using DRY RUN
# ---------------------------------------
#
# kubectl run --generator=run-pod/v1 nginx --image=nginx --dry-run -o yaml > nginx-pod-definition.yaml
#
# cat nginx-pod-definition.yaml
#     ...
#     ...
#     ...
#

Deploy a pod named nginx-pod using the nginx:alpine image:
kubectl run --generator=run-pod/v1 nginx-pod --image nginx:alpine

Deploy a redis pod using the redis:alpine image with the labels set to tier=db. 
Either use imperative commands to create the pod with the labels. 
Or else use imperative commands to generate the pod definition file, then add the labels before creating the pod using the file.
kubectl run --generator=run-pod/v1 redis --image=redis:alpine --dry-run -o yaml > redis.yml
vi redis.yml (to add labels)
kubectl create -f redis.yml

Create an NGINX Pod:
kubectl run --generator=run-pod/v1 nginx --image=nginx

Generate POD Manifest YAML file (-o yaml). Don't create it(--dry-run):
kubectl run --generator=run-pod/v1 nginx --image=nginx --dry-run -o yaml

Create a deployment:
kubectl run --generator=deployment/v1beta1 nginx --image=nginx

Or the newer recommended way:
kubectl create deployment --image=nginx nginx

Generate Deployment YAML file (-o yaml). Don't create it(--dry-run):
kubectl run --generator=deployment/v1beta1 nginx --image=nginx --dry-run -o yaml
OR
kubectl create deployment --image=nginx nginx --dry-run -o yaml

Generate Deployment YAML file (-o yaml). Don't create it(--dry-run) with 4 Replicas (--replicas=4):
kubectl run --generator=deployment/v1beta1 nginx --image=nginx --dry-run --replicas=4 -o yaml
kubectl create deployment does not have a --replicas option. You could first create it and then scale it using the kubectl scale command.
Save it to a file - (If you need to modify or add some other details)
kubectl run --generator=deployment/v1beta1 nginx --image=nginx --dry-run --replicas=4 -o yaml > nginx-deployment.yaml

Create a Service named nginx of type NodePort and expose it on port 30080 on the nodes:
kubectl create service nodeport nginx --tcp=80:80 --node-port=30080 --dry-run -o yaml
