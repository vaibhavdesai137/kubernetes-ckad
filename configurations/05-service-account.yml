
#
# Service accounts are needed by apps to talk to kube-api server.
# For every namespace, k8s automatically creates a serviceaccount called "default".
# For every pod created in that namespace, k8s will mount this secret token so all pods have access to it.
#
# For a new service account, k8s automatically creates a token for it.
# That token is then stored in a secret object.
#
# The token can then be exported out for use by 3rd party applications:
# curl https://kube-api-endpoint/api -insecure --header "Authorization: Bearer eyJhb...jftDUTg"
#
# Using RBACs, we can assign roles and permissions to this service account.
#
# What if the 3rd part application is deployed in k8s itself?
# In that case, its easy to simply mount the secrets as a volume and associate it to the pod.
# That way, all containers in the pod will have access to this secret token.
#
# kubectl create serviceaccount test
#     serviceaccount/test created
#
# kubectl get serviceaccount
#     NAME      SECRETS   AGE
#     default   1         19d
#     test      1         11s
# 
# kubectl describe serviceaccount test
#     Name:                test
#     Namespace:           default
#     Labels:              <none>
#     Annotations:         <none>
#     Image pull secrets:  <none>
#     Mountable secrets:   test-token-xg82h
#     Tokens:              test-token-xg82h
#     Events:              <none>
# 
# kubectl get secrets
#     NAME                  TYPE                                  DATA   AGE
#     default-token-cjxpt   kubernetes.io/service-account-token   3      9h
#     test-token-xg82h      kubernetes.io/service-account-token   3      2m38s
#
# kubectl describe secret test-token-xg82h
#     Name:         test-token-xg82h
#     Namespace:    default
#     Labels:       <none>
#     Annotations:  kubernetes.io/service-account.name: test
#                   kubernetes.io/service-account.uid: 317b339c-8e00-11e9-b6a3-0800278f9079
#     Type:  kubernetes.io/service-account-token
#     
#     Data
#     ====
#     ca.crt:     1066 bytes
#     namespace:  7 bytes
#     token:      eyJhb...jftDUTg
#    

# 
# Create a dummy pod and inspect the pod
# We should see the volume mount attached for the "default" service account.
#
apiVersion: v1
kind: Pod
metadata:
  name: redis-pod
spec:
  containers:
    - name: redis-container
      image: redis
  # Override the service account to our service account instead of using "default" service account
  serviceAccount: test
  # Can disable mounting the service token
  # automountServiceAccountToken: false

#
# kubectl describe pod redis-pod
#
#     Name:               redis-pod
#     Namespace:          default
#     ...
#     Containers:
#         resis-container:
#         Container ID:   docker://b2ffb49d29ef36a60f9b1cf29e213ec244a95cc541d39cd126b64594e58d1d88
#         ...
#         Mounts:
#            /var/run/secrets/kubernetes.io/serviceaccount from default-token-cjxpt (ro)
#         ...
#     Volumes:
#       default-token-cjxpt:
#         Type:        Secret (a volume populated by a Secret)
#         SecretName:  default-token-cjxpt
#         Optional:    false
#     ...
#     ...

#
# Verify the secret exists at the location mounted for the container:
# kubectl exec -it redis-container ls /var/run/secrets/kubernetes.io/serviceaccount
#     total 0
#     lrwxrwxrwx 1 root root 13 Jun 13 17:47 ca.crt -> ..data/ca.crt
#     lrwxrwxrwx 1 root root 16 Jun 13 17:47 namespace -> ..data/namespace
#     lrwxrwxrwx 1 root root 12 Jun 13 17:47 token -> ..data/token
#
# kubectl exec -it 5bad85922a8b cat /var/run/secrets/kubernetes.io/serviceaccount/token
#     eyJhbG.....1yT2w
#