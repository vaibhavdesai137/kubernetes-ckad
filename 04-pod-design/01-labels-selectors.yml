
#
# LABELS:
# Pods may be of different kinds, differnt types (frontend, backend, etc.)
# Based on business logic, we may also need to group pods in a way and also filter the pods.
# To achieve all these, we need labels.
# Labels are properties (key value pairs) attached to the pods. 
# For example, a pod representing an animal may have labels like class, kind, color, etc.
# We can create as many labels as we want for any k8s object.
#

#
# SELECTORS:
# In order to filter these pods, we need selectors.
# For example, we can say, class = mammals which gives us all pods that have the label "class" with a value of "mammals"
# Multiple selectors can be applied together as well.
# For example, kubectl get pod --selector class=mammal,color=red
#

#
# Once our cluster grows, we may have 100s of 1000s of objects in the cluster.
# We need a way to group these objects by their type (pods, services, etc.) or
# group by their functionality or group by the app.
# Combination of labels and selectors exactly help us achieve that.
# For this to work as expected, we need to attach correct labels as needed when creating objects.
#

apiVersion: v1
kind: Pod
metadata:
  name: loginapp-pod
  labels:
    type: frontend
    app: loginapp
spec:
  containers:
    - name: foobar-container
      image: foobar

#
# Once the above object is created, selectors can be applied as:
# kubectl get pods --selector type=frontend
# kubectl get pods --selector app=loginapp
#

# 
# Internally, k8s uses lables and selectors all the time to refer to other objects in the cluster.
# For example, refer to 01-core/04-replicaset.yml
# 01-core/04-replicaset.yml
#

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: redis-rs
  labels:
    foo: bar
spec:
  # Pod template so that RS knows how to spin up new pods when needed
  template:
    metadata:
      name: redis-pod
      labels:
        app: redis
    spec:
      containers:
        - name: redis-container
          image: redis
  # Number of replicas we want
  replicas: 3
  # Select the pod using labels that need replication
  selector:
    matchLabels:
      app: redis

# 
# Here, spec.selector.matchLabels is what the ReplicaSet will use to search what we are trying to replicate.
# In this case, our pod template has the label of app=redis so we use that in selector.
# Note that the label foo: bar is attached to the ReplicaSet itself and is useless in this case.
# It will be helpful if some other k8s object wants to refer to this ReplicaSet.
#